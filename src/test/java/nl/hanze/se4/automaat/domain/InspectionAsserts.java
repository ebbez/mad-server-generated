package nl.hanze.se4.automaat.domain;

import static nl.hanze.se4.automaat.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class InspectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectionAllPropertiesEquals(Inspection expected, Inspection actual) {
        assertInspectionAutoGeneratedPropertiesEquals(expected, actual);
        assertInspectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectionAllUpdatablePropertiesEquals(Inspection expected, Inspection actual) {
        assertInspectionUpdatableFieldsEquals(expected, actual);
        assertInspectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectionAutoGeneratedPropertiesEquals(Inspection expected, Inspection actual) {
        assertThat(expected)
            .as("Verify Inspection auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectionUpdatableFieldsEquals(Inspection expected, Inspection actual) {
        assertThat(expected)
            .as("Verify Inspection relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getOdometer()).as("check odometer").isEqualTo(actual.getOdometer()))
            .satisfies(e -> assertThat(e.getResult()).as("check result").isEqualTo(actual.getResult()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPhoto()).as("check photo").isEqualTo(actual.getPhoto()))
            .satisfies(e -> assertThat(e.getPhotoContentType()).as("check photo contenty type").isEqualTo(actual.getPhotoContentType()))
            .satisfies(e ->
                assertThat(e.getCompleted())
                    .as("check completed")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCompleted())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectionUpdatableRelationshipsEquals(Inspection expected, Inspection actual) {
        assertThat(expected)
            .as("Verify Inspection relationships")
            .satisfies(e -> assertThat(e.getCar()).as("check car").isEqualTo(actual.getCar()))
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()))
            .satisfies(e -> assertThat(e.getRental()).as("check rental").isEqualTo(actual.getRental()));
    }
}
