package nl.hanze.se4.automaat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RouteFromToAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteFromToAllPropertiesEquals(RouteFromTo expected, RouteFromTo actual) {
        assertRouteFromToAutoGeneratedPropertiesEquals(expected, actual);
        assertRouteFromToAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteFromToAllUpdatablePropertiesEquals(RouteFromTo expected, RouteFromTo actual) {
        assertRouteFromToUpdatableFieldsEquals(expected, actual);
        assertRouteFromToUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteFromToAutoGeneratedPropertiesEquals(RouteFromTo expected, RouteFromTo actual) {
        assertThat(expected)
            .as("Verify RouteFromTo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteFromToUpdatableFieldsEquals(RouteFromTo expected, RouteFromTo actual) {
        assertThat(expected)
            .as("Verify RouteFromTo relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteFromToUpdatableRelationshipsEquals(RouteFromTo expected, RouteFromTo actual) {
        assertThat(expected)
            .as("Verify RouteFromTo relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
