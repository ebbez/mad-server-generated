package nl.hanze.se4.automaat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RepairAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAllPropertiesEquals(Repair expected, Repair actual) {
        assertRepairAutoGeneratedPropertiesEquals(expected, actual);
        assertRepairAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAllUpdatablePropertiesEquals(Repair expected, Repair actual) {
        assertRepairUpdatableFieldsEquals(expected, actual);
        assertRepairUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAutoGeneratedPropertiesEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairUpdatableFieldsEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getRepairStatus()).as("check repairStatus").isEqualTo(actual.getRepairStatus()))
            .satisfies(e -> assertThat(e.getDateCompleted()).as("check dateCompleted").isEqualTo(actual.getDateCompleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairUpdatableRelationshipsEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair relationships")
            .satisfies(e -> assertThat(e.getCar()).as("check car").isEqualTo(actual.getCar()))
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()))
            .satisfies(e -> assertThat(e.getInspection()).as("check inspection").isEqualTo(actual.getInspection()));
    }
}
